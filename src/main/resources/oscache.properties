# CACHE IN MEMORY
#
# If you want to disable memory caching, just uncomment this line.
#
# cache.memory=false
#\u662f\u5426\u4f7f\u7528\u5185\u5b58\u7f13\u5b58; true \u6216 false\u3002\u9ed8\u8ba4\u4e3atrue;
cache.memory=true


# CACHE KEY
#
# This is the key that will be used to store the cache in the application
# and session scope.
#
# If you want to set the cache key to anything other than the default
# uncomment this line and change the cache.key
#
# cache.key=__oscache_cache


# USE HOST DOMAIN NAME IN KEY
#
# Servers for multiple host domains may wish to add host name info to
# the generation of the key.  If this is true, then uncomment the
# following line.
#
# cache.use.host.domain.in.key=true


# CACHE LISTENERS
#
# These hook OSCache events and perform various actions such as logging
# cache hits and misses, or broadcasting to other cache instances across a cluster.
# See the documentation for further information.
#
# cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JMSBroadcastingListener,  \
#                       com.opensymphony.oscache.extra.CacheEntryEventListenerImpl,               \
#                       com.opensymphony.oscache.extra.CacheMapAccessEventListenerImpl,           \
#                       com.opensymphony.oscache.extra.ScopeEventListenerImpl,                    \
#                       com.opensymphony.oscache.extra.StatisticListenerImpl


# CACHE PERSISTENCE CLASS
#
# Specify the class to use for persistence. If you use the supplied DiskPersistenceListener,
# don't forget to supply the cache.path property to specify the location of the cache
# directory.
# 
# If a persistence class is not specified, OSCache will use memory caching only.
#
# cache.persistence.class=com.opensymphony.oscache.plugins.diskpersistence.DiskPersistenceListener
# cache.persistence.class=com.opensymphony.oscache.plugins.diskpersistence.HashDiskPersistenceListener

# CACHE OVERFLOW PERSISTENCE
# Use persistent cache in overflow or not. The default value is false, which means
# the persistent cache will be used at all times for every entry.  true is the recommended setting.
#
# cache.persistence.overflow.only=true

# CACHE DIRECTORY
#
# This is the directory on disk where caches will be stored by the DiskPersistenceListener.
# it will be created if it doesn't already exist. Remember that OSCache must have
# write permission to this directory.
#
# Note: for Windows machines, this needs \ to be escaped
# ie Windows:
# cache.path=c:\\myapp\\cache
# or *ix:
# cache.path=/opt/myapp/cache
#
# cache.path=c:\\app\\cache


# CACHE ALGORITHM
#
# Default cache algorithm to use. Note that in order to use an algorithm
# the cache size must also be specified. If the cache size is not specified,
# the cache algorithm will be Unlimited cache.
#
# cache.algorithm=com.opensymphony.oscache.base.algorithm.LRUCache			:last in first out(\u6700\u540e\u63d2\u5165\u7684\u6700\u5148\u8c03\u7528)\u3002\u9ed8\u8ba4\u9009\u9879\u3002
# cache.algorithm=com.opensymphony.oscache.base.algorithm.FIFOCache			: first int first out(\u6700\u5148\u63d2\u5165\u7684\u6700\u5148\u8c03\u7528)\u3002
# cache.algorithm=com.opensymphony.oscache.base.algorithm.UnlimitedCache	: cache\u4e2d\u7684\u5185\u5bb9\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002
#\u4e09\u79cd\u89c4\u5219\uff1a
# \u5982\u679ccache.capacity\u4e0d\u6307\u5b9a\u503c\u7684\u8bdd\uff0c\u5b83\u5c06\u88ab\u8bbe\u4e3a\u9ed8\u8ba4\u9009\u9879\u3002
#cache.algorithm=com.opensymphony.oscache.base.algorithm.LRUCache

# THREAD BLOCKING BEHAVIOR
#
# When a request is made for a stale cache entry, it is possible that another thread is already
# in the process of rebuilding that entry. This setting specifies how OSCache handles the
# subsequent 'non-building' threads. The default behaviour (cache.blocking=false) is to serve
# the old content to subsequent threads until the cache entry has been updated. This provides
# the best performance (at the cost of serving slightly stale data). When blocking is enabled,
# threads will instead block until the new cache entry is ready to be served. Once the new entry
# is put in the cache the blocked threads will be restarted and given the new entry.
# Note that even if blocking is disabled, when there is no stale data available to be served
# threads will block until the data is added to the cache by the thread that is responsible
# for building the data.
#
# cache.blocking=false
# \u662f\u5426\u540c\u6b65\u3002true \u6216\u8005 false\u3002\u4e00\u822c\u8bbe\u4e3atrue\uff0c\u907f\u514d\u8bfb\u53d6\u810f\u6570\u636e\u3002
cache.blocking=true

# CACHE SIZE
#
# Default cache size in number of items. If a size is specified but not
# an algorithm, the cache algorithm used will be LRUCache.
#
#\u7f13\u5b58\u7684\u6700\u5927\u6570\u91cf\u3002\u9ed8\u8ba4\u662f\u4e0d\u9650\u5236\uff0ccache\u4e0d\u4f1a\u79fb\u8d70\u4efb\u4f55\u7f13\u5b58\u5185\u5bb9\u3002\u8d1f\u6570\u88ab\u89c6\u4e0d\u9650\u5236\u3002
cache.capacity=10000


# CACHE UNLIMITED DISK
# Use unlimited disk cache or not. The default value is false, which means
# the disk cache will be limited in size to the value specified by cache.capacity.
#
# cache.unlimited.disk=false
#\u6307\u5b9a\u786c\u76d8\u7f13\u5b58\u662f\u5426\u8981\u4f5c\u9650\u5236\u3002\u9ed8\u8ba4\u503c\u4e3afalse\u3002false\u7684\u72b6\u51b5\u4e0b\uff0cdisk cache capacity \u548ccache.capacity\u7684\u503c\u76f8\u540c\u3002


# JMS CLUSTER PROPERTIES
#
# Configuration properties for JMS clustering. See the clustering documentation
# for more information on these settings.
#
#cache.cluster.jms.topic.factory=java:comp/env/jms/TopicConnectionFactory
#cache.cluster.jms.topic.name=java:comp/env/jms/OSCacheTopic
#cache.cluster.jms.node.name=node1


# JAVAGROUPS CLUSTER PROPERTIES
#
# Configuration properites for the JavaGroups clustering. Only one of these
# should be specified. Default values (as shown below) will be used if niether
# property is set. See the clustering documentation and the JavaGroups project
# (www.javagroups.com) for more information on these settings.
#
#cache.cluster.properties=UDP(mcast_addr=231.12.21.132;mcast_port=45566;ip_ttl=32;\
#mcast_send_buf_size=150000;mcast_recv_buf_size=80000):\
#PING(timeout=2000;num_initial_members=3):\
#MERGE2(min_interval=5000;max_interval=10000):\
#FD_SOCK:VERIFY_SUSPECT(timeout=1500):\
#pbcast.NAKACK(gc_lag=50;retransmit_timeout=300,600,1200,2400,4800;max_xmit_size=8192):\
#UNICAST(timeout=300,600,1200,2400):\
#pbcast.STABLE(desired_avg_gossip=20000):\
#FRAG(frag_size=8096;down_thread=false;up_thread=false):\
#pbcast.GMS(join_timeout=5000;join_retry_timeout=2000;shun=false;print_local_addr=true)
#cache.cluster.multicast.ip=231.12.21.132
